# This file should be modified for your site before building IRMISBase.

# An arbitrary string representing the build id. This is typically the same 
# as what you would tag the source in CVS with.
build-id=irmisBase_yyyymmdd-00

# These are general database properties

# db.vendor=Oracle
db.vendor=MySQL

# These are the JDBC and Perl DBI database connection properties 

# db.connection.driver=oracle.jdbc.driver.OracleDriver
db.connection.driver=org.gjt.mm.mysql.Driver

db.connection.host=127.0.0.1
db.connection.database=irmis

# db.connection.url=jdbc:oracle:thin:@snsdb1.sns.ornl.gov:1521:prod
db.connection.url=jdbc:mysql://127.0.0.1:3306/irmis

# These are various db accounts used by the applications, depending on
#   whether or not the application is read-only, or read/write. You can
#   supply whatever accounts you want, even the same one twice.

# not used right now, but good for read-only client apps
db.trust-read.username=irmis
db.trust-read.password=irmis

#  used by crawler and irmis desktop, which must have write permission
db.trust-read-write.username=irmis
db.trust-read-write.password=irmis

# Hibernate SQL dialect to be used. For oracle, you choose
#   org.hibernate.dialect.OracleDialect 
hibernate.dialect=org.hibernate.dialect.MySQLDialect

# Turns on/off the detailed Hibernate logging of sql statements. Makes a big
# difference in performance, so make sure you turn this off for production.
hibernate.show_sql=false

# This optional property allows one to completely override the standard
# hibernate.cfg.xml file which uses many of the above properties. The 
# property gives the location of your cfg.xml within the java package
# hierarchy. The default is in the root package, so just hibernate.cfg.xml.
#
hibernate.configuration.file=hibernate.cfg.xml

# If a non-empty value is given here, the java applications will assume
# that the hibernate configuration file is blowfish encrypted with a 16
# byte key. This is used to decrypt the file at runtime.
hibernate.configuration.key=

# This property specifies where the irmisDeploy.tar tarball is being deployed 
#  on the web server. This is used to set some variables in the irmis.jnlp
#  Java WebStart file.
irmis.codebase=http://127.0.0.1/irmis2/idt

# This property causes the desktop application to have a different background
# color and explicit notice that a "test" version is being used. This is useful
# when giving users a version to play with against a test database.
irmis.test=false

# This property specifies the JAAS-compliant LoginModule implementation that
# will be used by the irmis desktop application. This determines how a user 
# will be authenticated and authorized when they login via the dialog 
# The three existing choices right now are:
#   gov.anl.aps.irmis.login.APSLoginModule    
#        - uses LDAP for authentication and person/role tables for authorization
#   gov.anl.aps.irmis.login.PersonRoleLoginModule 
#        - uses person/role tables for authorization (no authentication done)
#   gov.anl.aps.irmis.login.DoNothingLoginModule   
#        -  circumvents any authentication and hardcodes wide-open authorization
#irmis.login=gov.anl.aps.irmis.login.DoNothingLoginModule 
irmis.login=gov.anl.aps.irmis.login.APSLoginModule 

# This property specifies a class implementing the IOCExtendedInfoPlugin interface.
# Different IRMIS sites will likely have a different set of ioc info that they
# wish to maintain. This plugin provides a Swing component for displaying/editing
# this custom info, which is incorporated into the idtioc application shipped with
# irmisBase. An APS-specific plugin is provided as an example, which in turn depends
# on the aps_ioc table and associated Hibernate mapping. Any plugin you create does
# not have to use Hibernate, however.
 
irmis.ioc.plugin=gov.anl.aps.irmis.apps.ioc.cfw.plugins.APSIOCInfo

