/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gov.anl.aps.cdb.portal.plugins;

import gov.anl.aps.cdb.portal.model.db.entities.PropertyTypeHandler;
import gov.anl.aps.cdb.portal.model.db.entities.PropertyValue;
import gov.anl.aps.cdb.portal.model.jsf.handlers.PropertyTypeHandlerInterface;

import gov.anl.aps.cdb.portal.utilities.SessionUtility;
import java.io.Serializable;
import java.util.Set;
import javax.enterprise.context.SessionScoped;
import javax.inject.Named;
import org.jboss.weld.util.collections.ArraySet;

// Must be generated by tools/developer_tools/cdb_plugins
import gov.anl.aps.cdb.portal.plugins.support.PluginRegistrar;

/**
 *
 * @author djarosz
 */
@SessionScoped
@Named("cdbPluginManager")
public class CdbPluginManager implements Serializable {
    
    Set<PluginManagerBase> pluginManagerSet = null;

    public CdbPluginManager() {
        pluginManagerSet = new ArraySet<>(); 
        PluginRegistrar.registerPlugins(this);
    }
    
    public static CdbPluginManager getInstance() {
        return (CdbPluginManager) SessionUtility.findBean("cdbPluginManager"); 
    }
    
    public void registerPlugin(PluginManagerBase pluginManager) {
        pluginManagerSet.add(pluginManager); 
    }
    
    public PropertyTypeHandlerInterface getPropertyTypeHandler(String hanlderName) {
        PluginManagerBase pluginWithPropertyTypeHandler = getPluginManagerByPropertyTypeHandler(hanlderName);
        if (pluginWithPropertyTypeHandler != null) {
            return pluginWithPropertyTypeHandler.getPluginPropertyTypeHandler(); 
        }
        return null;
    }
    
    private PluginManagerBase getPluginManagerByPropertyTypeHandler(String propertyTypeHandlerName) {
        for (PluginManagerBase pluginManager : pluginManagerSet) {
            PropertyTypeHandlerInterface pluginPropertyTypeHandler = pluginManager.getPluginPropertyTypeHandler();
            if (pluginPropertyTypeHandler != null) {
                if (pluginPropertyTypeHandler.getName().equals(propertyTypeHandlerName)) {
                    return pluginManager;
                }
            }
        }
        return null; 
    }
    
    public void loadInfoActionForPropertyValue(PropertyValue propertyValue) {
        if (propertyValue != null) {
            if (propertyValue.getPropertyType() != null) {
                PropertyTypeHandler propertyTypeHandler = propertyValue.getPropertyType().getPropertyTypeHandler();
                if (propertyTypeHandler != null) {
                    PluginManagerBase pluginManager = getPluginManagerByPropertyTypeHandler(propertyTypeHandler.getName()); 
                    pluginManager.performInfoActionLoad(propertyValue);                    
                }
            }
        }        
    }
    
    public PluginManagerBase getPluginManagerByName(String pluginName) {
        for (PluginManagerBase pluginManager : pluginManagerSet) {
            if (pluginManager.getPluginName().equals(pluginName)) {
                return pluginManager; 
            }
        }
        return null; 
    }    
    
}
