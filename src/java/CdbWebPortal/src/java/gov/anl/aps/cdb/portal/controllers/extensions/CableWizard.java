/*
 * Copyright (c) UChicago Argonne, LLC. All rights reserved.
 * See LICENSE file.
 */
package gov.anl.aps.cdb.portal.controllers.extensions;

import gov.anl.aps.cdb.common.utilities.StringUtility;
import gov.anl.aps.cdb.portal.controllers.ItemDomainCableDesignController;
import gov.anl.aps.cdb.portal.controllers.ItemDomainCableDesignWizardBase;
import gov.anl.aps.cdb.portal.model.db.entities.Item;
import gov.anl.aps.cdb.portal.model.db.entities.ItemElement;
import gov.anl.aps.cdb.portal.model.db.entities.ItemProject;
import gov.anl.aps.cdb.portal.utilities.SessionUtility;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.List;
import javax.enterprise.context.SessionScoped;
import javax.inject.Named;
import org.primefaces.event.FlowEvent;
import org.primefaces.event.NodeSelectEvent;
import org.primefaces.event.NodeUnselectEvent;
import org.primefaces.model.TreeNode;

/**
 * This class is intended to be used by another controller class, e.g.,
 * ItemDomainMachineDesignController, and is utilized when adding a new cable
 * design item.
 *
 * @author cmcchesney
 */
@Named(CableWizard.CONTROLLER_NAMED)
@SessionScoped
public class CableWizard extends ItemDomainCableDesignWizardBase implements Serializable {

    public static final String CONTROLLER_NAMED = "cableWizard";
    
    private String selectionCableType = null;
    private Item selectionCableCatalogItem = null;
    
    public static final String cableTypeUnspecified = "unspecified";
    public static final String cableTypeCatalog = "catalog";
    private static final String tabEndpoint = "endpointTab";
    private static final String tabBasics = "cableBasicsTab";
    private static final String tabType = "cableTypeTab";
    private static final String tabDetails = "cableDetailsTab";
    private static final String tabReview = "cableReviewTab";

    /**
     * Creates new instance with a "dummy" client implementation of the
     * ItemDomainCableDesignWizardClient using no ops.
     */
    public CableWizard() {
        currentTab = tabEndpoint;
    }

    public static CableWizard getInstance() {
        return (CableWizard) SessionUtility.findBean(CableWizard.CONTROLLER_NAMED);
    } 


    /**
     * Returns whether to specify cable type (e.g., unspecified or catalog). 
     * This is the model for radio buttons on the wizard's cable type tab.
     */
    public String getSelectionCableType() {
        return selectionCableType;
    }

    /**
     * @link ItemDomainCableDesignWizard#getCableType
     */
    public void setSelectionCableType(String selectionCableType) {
        this.selectionCableType = selectionCableType;
    }
    
    /**
     * Returns true if the cable type is unspecified.
     */
    public Boolean isTypeUnspecified() {
        if (selectionCableType == null) {
            return false;
        } else {
            return selectionCableType.equals(cableTypeUnspecified);
        }
    }

    /**
     * Returns true if the cable type is catalog.
     */
    public Boolean isTypeCatalog() {
        if (selectionCableType == null) {
            return false;
        } else {
            return selectionCableType.equals(cableTypeCatalog);
        }
    }

    /**
     * Returns the selection model for the cable catalog data table.
     */
    public Item getSelectionCableCatalogItem() {
        return selectionCableCatalogItem;
    }

    /**
     * @link ItemDomainCableDesignWizard#getSelectedCableCatalogItem
     */
    public void setSelectionCableCatalogItem(Item selectionCableCatalogItem) {
        this.selectionCableCatalogItem = selectionCableCatalogItem;
    }


    /**
     * Handles FlowEvents generated by the wizard component.  Determines next
     * tab based on current tab, defaults to visiting all tabs but implements
     * special cases.  Skips cableDetailsTab when the type is "unspecified"
     * since that tab is empty.
     */
    public String onFlowProcess(FlowEvent event) {

        String nextStep = event.getNewStep();
        String currStep = event.getOldStep();
        
        // skip details tab for unspecified cable type
        if ((nextStep.equals(tabDetails)) && (isTypeUnspecified())) {
            if (currStep.equals(tabType)) {
                nextStep = tabReview;
            } else if (currStep.equals(tabReview)) {
                nextStep = tabType;
            }
        }

        setEnablement(nextStep);

        currentTab = nextStep;

        return nextStep;
    }


    /**
     * Handles click events for the selectionCableType selectOneRadio component.
     */
    public void clickListenerCableType() {
        setEnablementForCurrentTab();
    }

    /**
     * Handles selection events for the cable catalog item datatable component.
     */
    public void selectListenerCableCatalogItem() {
        setEnablementForCurrentTab();
    }
    
    /**
     * Resets models for wizard components.
     */
    protected void reset() {
        currentTab = "endpointTab";
        machineDesignTreeEndpoint1 = null;
        machineDesignTreeEndpoint2 = null;
        inputValueName = "";
        selectionEndpoint1 = null;
        selectionEndpoint2 = null;
        selectionCableType = null;
        selectionCableCatalogItem = null;
        selectionProjectList = null;
    }

    /**
     * Implements the cancel operation, invoked by the wizard's "Cancel"
     * navigation button.
     */
    public String cancel() {
        if (client != null) {
            client.cleanupCableWizard();
        }
        this.reset();
        return "list";
    }

    /**
     * Implements the save operation, invoked by the wizard's "Save" navigation
     * button.
     */
    public String save() {

        if (selectionEndpoint1 == null) {
            SessionUtility.addErrorMessage(
                    "Could not save cable",
                    "Please specify first endpoint.");
            return "";
        }

        if (selectionEndpoint2 == null) {
            SessionUtility.addErrorMessage(
                    "Could not save cable",
                    "Please specify second endpoint.");
            return "";
        }

        if (inputValueName.isEmpty()) {
            SessionUtility.addErrorMessage(
                    "Could not save cable",
                    "Please specify cable name.");
            return "";
        }

        if (selectionCableType == null) {
            SessionUtility.addErrorMessage(
                    "Could not save cable",
                    "Please specify second endpoint.");
            return "";
        }

        Item itemEndpoint1 = ((ItemElement) (selectionEndpoint1.getData())).getContainedItem();
        Item itemEndpoint2 = ((ItemElement) (selectionEndpoint2.getData())).getContainedItem();

        ItemDomainCableDesignController controller = ItemDomainCableDesignController.getInstance();

        boolean result = false;

        switch (selectionCableType) {

            case cableTypeUnspecified:
                if (result = controller.createCableUnspecified(itemEndpoint1,
                        itemEndpoint2,
                        inputValueName,
                        selectionProjectList)) {
                } else {
                }
                break;

            case cableTypeCatalog:
                if (selectionCableCatalogItem == null) {
                    SessionUtility.addErrorMessage(
                            "Could not save cable",
                            "Please select cable catalog item.");
                    return "";
                } else {
                    
                    if (result = controller.createCableCatalog(itemEndpoint1,
                            itemEndpoint2,
                            inputValueName,
                            selectionProjectList,
                            selectionCableCatalogItem)) {
                    } else {
                    }
                }
                break;
        }

        if (result) {
            
            // get redirect before calling cleanup or it will be reset
            String redirect = "";
            if (getRedirectSuccess().isEmpty()) {
                redirect = defaultRedirectSuccess;
            } else {
                redirect = getRedirectSuccess();
            }
            
            if (client != null) {
                client.cleanupCableWizard();
            }
            
            this.reset();
            
            return redirect;
        }
        else {
            return "";
        }
    }
    
    /**
     * Sets enable/disable state for the navigation buttons based on the current
     * tab and input elements.
     */
    protected void setEnablement(String tab) {
        switch (tab) {
            case "endpointTab":
                disableButtonPrev = true;
                disableButtonCancel = false;
                disableButtonSave = true;
                if (selectionEndpoint2 != null) {
                    disableButtonNext = false;
                } else {
                    disableButtonNext = true;
                }
                break;
            case "cableBasicsTab":
                disableButtonPrev = false;
                disableButtonCancel = false;
                disableButtonSave = true;
                if ((inputValueName.isEmpty()) || (selectionProjectList.isEmpty())) {
                    disableButtonNext = true;
                } else {
                    disableButtonNext = false;
                }
                break;
            case "cableTypeTab":
                disableButtonPrev = false;
                disableButtonCancel = false;
                disableButtonSave = true;
                if (selectionCableType == null) {
                    disableButtonNext = true;
                } else {
                    disableButtonNext = false;
                }
                break;
            case "cableDetailsTab":
                disableButtonPrev = false;
                disableButtonCancel = false;
                disableButtonSave = true;
                switch (selectionCableType) {
                    case cableTypeUnspecified:
                        disableButtonNext = false;
                        break;
                    case cableTypeCatalog:
                        if (selectionCableCatalogItem != null) {
                            disableButtonNext = false;
                        } else {
                            disableButtonNext = true;
                        }
                        break;
                    default:
                        disableButtonNext = true;
                }
                break;
            case "cableReviewTab":
                disableButtonPrev = false;
                disableButtonCancel = false;
                disableButtonSave = false;
                disableButtonNext = true;
                break;
            default:
                disableButtonPrev = true;
                disableButtonCancel = false;
                disableButtonSave = true;
                disableButtonNext = true;
        }
    }
}
